package main

import (
	"io/ioutil"
	"testing"
)

func TestSolveDay20Part1(t *testing.T) {
	t.Run("Test SolveDay20Part1", func(t *testing.T) {
		got := SolveDay20Part1(`

#..#.
#....
##..#
..#..
..###`)
		expected := 35

		if got != expected {
			t.Errorf("expected '%d' but got '%d'", expected, got)
		}
	})
}

func BenchmarkSolveDay20Part1(b *testing.B) {
	i, _ := ioutil.ReadFile("input.txt")
	for n := 0; n < b.N; n++ {
		_ = SolveDay20Part1(string(i))
	}
}

func TestSolveDay20Part2(t *testing.T) {
	t.Run("Test SolveDay20Part2", func(t *testing.T) {
		got := SolveDay20Part2(`

#..#.
#....
##..#
..#..
..###`)
		expected := 3351
		if got != expected {
			t.Errorf("expected '%d' but got '%d'", expected, got)
		}
	})
}

func BenchmarkSolveDay20Part2(b *testing.B) {
	i, _ := ioutil.ReadFile("input.txt")
	for n := 0; n < b.N; n++ {
		_ = SolveDay20Part2(string(i))
	}
}
